{"version":3,"sources":["TimerDisplay.js","ChangeTime.js","App.js","serviceWorker.js","index.js"],"names":["TimerDisplay","props","workTimeLeft","breakTimeLeft","workTime","Date","toISOString","substring","moment","duration","format","breakTime","Card","className","id","workTimerOn","breakTimerOn","working","Button","variant","onClick","handleWorkClick","handleBreakClick","src","reset","ChooseWorkTime","increaseTime","minutes","decreaseTime","ChooseBreakTime","App","work","breaker","useState","setWorkTime","asSeconds","workSeconds","setWorkSeconds","setBreakTime","breakSeconds","setBreakSeconds","setWorking","setWorkTimerOn","setBreakTimerOn","alarmOn","setAlarmOn","changeWork","changer","changeBreak","useEffect","workInterval","setInterval","clearInterval","breakInterval","sound","document","getElementById","load","play","playSound","switchTimers","Container","fluid","Row","Col","md","CardDeck","pause","resetSound","href","title","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.9bce5180.chunk.js","sourcesContent":["import React from 'react';\nimport Card from 'react-bootstrap/Card';\nimport Button from 'react-bootstrap/Button';\nimport moment from 'moment';\n// eslint-disable-next-line\nimport momentDurationFormatSetup from \"moment-duration-format\";\nconst alarm = \"https://cfa-sounds.s3-us-west-1.amazonaws.com/Mission+Meow.m4a\";\n\nexport function TimerDisplay(props) {\n  let workTimeLeft;\n  props.workTime === 0 ? workTimeLeft = new Date(0).toISOString().substring(14,19) : workTimeLeft = moment.duration(props.workTime, \"seconds\").format(\"mm:ss\");\n  let breakTimeLeft;\n  props.breakTime === 0 ? breakTimeLeft = new Date(0).toISOString().substring(14,19) : breakTimeLeft = moment.duration(props.breakTime, \"seconds\").format(\"mm:ss\");\n\n  return (\n    <Card className=\"timer shadow-lg\" >\n      <div id=\"timer-label\" ><h3>Session: </h3>\n      {props.workTimerOn && <h3>Work</h3>}\n      {props.breakTimerOn && <h3>Break</h3>}\n      </div>\n      {props.working && \n      <Button id=\"start_stop\" variant=\"danger\" onClick={props.handleWorkClick} >{props.workTimerOn  ? \"Pause Timer\" : \"Start Timer\"}</Button>\n      }\n      {!props.working && \n      <Button id=\"start_stop\" variant=\"danger\" onClick={props.handleBreakClick} >{props.breakTimerOn  ? \"Pause Timer\" : \"Start Timer\"}</Button>\n      }\n      \n      <h2 id=\"time-left\">{props.working ? workTimeLeft : breakTimeLeft}</h2>\n      \n        <audio\n          id=\"beep\"\n          src={alarm} >\n            Your browser does not support the\n            <code>audio</code> element.\n         </audio>\n      <Button id=\"reset\" variant=\"danger\" onClick={props.reset} >Reset</Button>\n      </Card>\n  );\n}","import React from 'react';\nimport Button from 'react-bootstrap/Button';\nimport Card from 'react-bootstrap/Card';\n\nexport function ChooseWorkTime(props) {\n  return ( \n    <Card className=\"shadow-lg time\"> \n      <h3 id=\"session-label\">Set your work interval time</h3>\n      <Button id=\"session-increment\" variant=\"secondary\" onClick={props.increaseTime} >Increase Time</Button>\n      <h2 id=\"session-length\">{props.minutes}</h2>\n      <Button id=\"session-decrement\" variant=\"secondary\" onClick={props.decreaseTime}>Decrease Time</Button>\n    </Card>\n  );\n}\n\nexport function ChooseBreakTime(props) {\n  return (\n    <Card className=\"shadow-lg time\">\n      <h3 id=\"break-label\">Set your break interval time</h3>\n      <Button id=\"break-increment\" variant=\"secondary\" onClick={props.increaseTime} >Increase Time</Button>\n      <h2 id=\"break-length\">{props.minutes}</h2>\n      <Button id=\"break-decrement\" variant=\"secondary\" onClick={props.decreaseTime}>Decrease Time</Button>\n    </Card>\n  );\n}","import React, {useState, useEffect} from 'react';\nimport moment from 'moment';\nimport Container from 'react-bootstrap/Container';\nimport CardDeck from 'react-bootstrap/CardDeck';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport {TimerDisplay} from '../src/TimerDisplay';\nimport {ChooseWorkTime, ChooseBreakTime} from '../src/ChangeTime';\nimport './App.css';\n\nfunction App(props) {\n  const work= moment.duration({'minutes': 25});\n  const breaker = moment.duration({'minutes': 5});\n  \n  const [workTime, setWorkTime] = useState(work.minutes());\n  const [workSeconds, setWorkSeconds] = useState(work.asSeconds());\n  const [breakTime, setBreakTime] = useState(breaker.minutes());\n  const [breakSeconds, setBreakSeconds] = useState(breaker.asSeconds());\n  \n  const [working, setWorking] = useState(true);\n  const [workTimerOn, setWorkTimerOn] = useState(false);\n  const [breakTimerOn, setBreakTimerOn] = useState(false);\n  const [alarmOn, setAlarmOn] = useState(false);\n  \n  function changeWork(changer) {\n    if (changer === \"increase\" && workTime < 60) {\n      setWorkTime(workTime => workTime + 1);\n    } else if (changer === \"decrease\" && workTime > 1) {\n      setWorkTime(workTime => workTime - 1)\n    } else {\n      return;\n    }\n  }\n  \n  function changeBreak(changer) {\n    if (changer === \"increase\" && breakTime < 60) {\n      setBreakTime(breakTime => breakTime + 1);\n    } else if (changer === \"decrease\" && breakTime > 1) {\n      setBreakTime(breakTime => breakTime - 1)\n    } else {\n      return;\n    }\n  }\n  function resetSound() {\n    let sound = document.getElementById(\"beep\");\n    sound.pause();\n    sound.load();\n  }\n \n  function reset() {\n    resetSound();\n    setWorkTime(work.minutes());\n    setWorkSeconds(work.asSeconds());\n    setBreakTime(breaker.minutes());\n    setBreakSeconds(breaker.asSeconds());\n    setAlarmOn(false);\n    setWorkTimerOn(false);\n    setBreakTimerOn(false);\n    setWorking(true);\n  }\n  \n  function switchTimers() {\n    if (workTimerOn) {\n      let minutes = moment.duration({\"minutes\": breakTime});\n      setBreakSeconds(breakSeconds => minutes.asSeconds());\n      setWorkTimerOn(false);\n      setBreakTimerOn(true);\n    } else if (breakTimerOn){\n      let minutes = moment.duration({\"minutes\": workTime});\n      setWorkSeconds(workSeconds => minutes.asSeconds());\n      setWorkTimerOn(true);\n      setBreakTimerOn(false);\n    }\n  }\n  \n  function playSound() {\n    let sound = document.getElementById(\"beep\");\n      sound.load();\n      sound.play();\n  }\n  \n  function handleWorkClick() {\n    setWorkTimerOn(!workTimerOn);\n  }\n  \n  function handleBreakClick() {\n    setBreakTimerOn(!breakTimerOn);\n  }\n  \n  useEffect(() => {\n    if (workTime <= 0) {\n      setWorkTime(1);\n    } else if (workTime > 60) {\n      setWorkTime(60);\n    }\n    let minutes = moment.duration({\"minutes\": workTime});\n    setWorkSeconds(workSeconds => minutes.asSeconds());\n  }, [workTime]);\n  \n  useEffect(() => {\n    if (breakTime <= 0 ) {\n      setBreakTime(1);\n    } else if (breakTime > 60) {\n      setBreakTime(60);\n    }\n    let minutes = moment.duration({\"minutes\": breakTime});\n    setBreakSeconds(breakSeconds => minutes.asSeconds());\n  }, [breakTime]);\n\n  useEffect(() => {\n    let workInterval = null;\n    if (workTimerOn && workSeconds > 0) {\n      workInterval = setInterval(() => {\n        setWorkSeconds(workSeconds => workSeconds - 1);\n      }, 1000);\n    }  else if (workSeconds === 0) {\n      clearInterval(workInterval);\n    }\n    return () => clearInterval(workInterval);\n  }, [workTimerOn, workSeconds]);\n  \n  useEffect(() => { \n    let breakInterval = null;\n    if (breakTimerOn  && breakSeconds > 0) {\n      breakInterval = setInterval(() => {\n        setBreakSeconds(breakSeconds => breakSeconds - 1);\n      }, 1000);\n    } else if (breakSeconds === 0) {\n      clearInterval(breakInterval);\n    }\n    return () => clearInterval(breakInterval);\n  }, [breakTimerOn, breakSeconds]);\n  \n  useEffect(() => {\n    if (workSeconds === 0) {\n      setAlarmOn(true);\n      setWorking(false);\n    }\n  }, [workSeconds]);\n  \n  useEffect(() => {\n    if (breakSeconds === 0) {\n      setAlarmOn(true);\n      setWorking(true);\n    }\n  }, [breakSeconds]);\n  \n  useEffect(() => {\n    if (alarmOn) {\n      playSound();\n    }\n    return () => {\n      switchTimers();\n      setAlarmOn(false);\n    }\n     // eslint-disable-next-line\n  }, [alarmOn])\n  \n  return (\n  <Container fluid className=\"app bg-gradient-info\">\n      <Row>\n        <Col md={10} className=\"offset-md-1\" >\n          <h1 className=\"m-4\">Pomodoro Timer</h1>\n          <CardDeck className=\"deck\">\n              <ChooseWorkTime  \n                increaseTime={() => changeWork(\"increase\")} \n                decreaseTime={() => changeWork(\"decrease\")}  \n                minutes={workTime} \n                />\n              <TimerDisplay \n                workTime={workSeconds}\n                breakTime={breakSeconds}\n                handleWorkClick={handleWorkClick} \n                handleBreakClick={handleBreakClick}\n                workTimerOn={workTimerOn} \n                breakTimerOn={breakTimerOn}\n                reset={reset}\n                working={working}\n                />\n              <ChooseBreakTime  \n                increaseTime={() => changeBreak(\"increase\")} \n                decreaseTime={() => changeBreak(\"decrease\")}  \n                minutes={breakTime} \n                />\n          </CardDeck>\n          <div id=\"credits\">Icons made by <a href=\"https://www.flaticon.com/authors/freepik\" title=\"Freepik\">Freepik</a> from <a href=\"https://www.flaticon.com/\" title=\"Flaticon\">www.flaticon.com</a></div>\n        </Col>\n      </Row>\n      \n  </Container>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}